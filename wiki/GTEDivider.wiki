#summary Notes about GTE divider, used in RTPS/RTPT.

= Introduction =

{{{
If a program contains too much division, the programmer's an idiot
}}}
(c) Professor.

GTE has integrated divider, based on Unsigned Newton-Raphson (UNR) algorithm. If you're smart enough, you can read this m$ paper: <br>
<a href="http://research.microsoft.com/apps/pubs/default.aspx?id=70645">Software Integer Division</a><br>
I didn't managed to understand it :=)

It seems GTE also has hardwired 256-entry UNR table on chip:<br>

||FF ||FD ||FB ||F9 ||F7 ||F5 ||F3 ||F1 ||EF ||EE ||EC ||EA ||E8 ||E6 ||E4 ||E3||
||E1 ||DF ||DD ||DC ||DA ||D8 ||D6 ||D5 ||D3 ||D1 ||D0 ||CE ||CD ||CB ||C9 ||C8||
||C6 ||C5 ||C3 ||C1 ||C0 ||BE ||BD ||BB ||BA ||B8 ||B7 ||B5 ||B4 ||B2 ||B1 ||B0||
||AE ||AD ||AB ||AA ||A9 ||A7 ||A6 ||A4 ||A3 ||A2 ||A0 ||9F ||9E ||9C ||9B ||9A||
||99 ||97 ||96 ||95 ||94 ||92 ||91 ||90 ||8F ||8D ||8C ||8B ||8A ||89 ||87 ||86||
||85 ||84 ||83 ||82 ||81 ||7F ||7E ||7D ||7C ||7B ||7A ||79 ||78 ||77 ||75 ||74||
||73 ||72 ||71 ||70 ||6F ||6E ||6D ||6C ||6B ||6A ||69 ||68 ||67 ||66 ||65 ||64||
||63 ||62 ||61 ||60 ||5F ||5E ||5D ||5D ||5C ||5B ||5A ||59 ||58 ||57 ||56 ||55||
||54 ||53 ||53 ||52 ||51 ||50 ||4F ||4E ||4D ||4D ||4C ||4B ||4A ||49 ||48 ||48||
||47 ||46 ||45 ||44 ||43 ||43 ||42 ||41 ||40 ||3F ||3F ||3E ||3D ||3C ||3C ||3B||
||3A ||39 ||39 ||38 ||37 ||36 ||36 ||35 ||34 ||33 ||33 ||32 ||31 ||31 ||30 ||2F||
||2E ||2E ||2D ||2C ||2C ||2B ||2A ||2A ||29 ||28 ||28 ||27 ||26 ||26 ||25 ||24||
||24 ||23 ||22 ||22 ||21 ||20 ||20 ||1F ||1E ||1E ||1D ||1D ||1C ||1B ||1B ||1A||
||19 ||19 ||18 ||18 ||17 ||16 ||16 ||15 ||15 ||14 ||14 ||13 ||12 ||12 ||11 ||11||
||10 ||0F ||0F ||0E ||0E ||0D ||0D ||0C ||0C ||0B ||0A ||0A ||09 ||09 ||08 ||08||
||07 ||07 ||06 ||06 ||05 ||05 ||04 ||04 ||03 ||03 ||02 ||02 ||01 ||01 ||00 ||00||

(which is similar to `unrt[]` table from manual)

During calculations those entries are extended to 32-bit integers, but Pops generate additional 0x8000 entries table, to speedup calculations.

= Details =

Source code of GTE divider on C:

{{{

// UNR table.
// Must be hardwired somewhere in CPU chip.
// If someone wish to decap PSX CPU I have bunch of them, contact me ogamespec@gmail.com, I'll send it free.
static u8 unrt[] = {
    0xFF, 0xFD, 0xFB, 0xF9, 0xF7, 0xF5, 0xF3, 0xF1, 0xEF, 0xEE, 0xEC, 0xEA, 0xE8, 0xE6, 0xE4, 0xE3,
    0xE1, 0xDF, 0xDD, 0xDC, 0xDA, 0xD8, 0xD6, 0xD5, 0xD3, 0xD1, 0xD0, 0xCE, 0xCD, 0xCB, 0xC9, 0xC8,
    0xC6, 0xC5, 0xC3, 0xC1, 0xC0, 0xBE, 0xBD, 0xBB, 0xBA, 0xB8, 0xB7, 0xB5, 0xB4, 0xB2, 0xB1, 0xB0,
    0xAE, 0xAD, 0xAB, 0xAA, 0xA9, 0xA7, 0xA6, 0xA4, 0xA3, 0xA2, 0xA0, 0x9F, 0x9E, 0x9C, 0x9B, 0x9A,
    0x99, 0x97, 0x96, 0x95, 0x94, 0x92, 0x91, 0x90, 0x8F, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x87, 0x86,
    0x85, 0x84, 0x83, 0x82, 0x81, 0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78, 0x77, 0x75, 0x74,
    0x73, 0x72, 0x71, 0x70, 0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64,
    0x63, 0x62, 0x61, 0x60, 0x5F, 0x5E, 0x5D, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58, 0x57, 0x56, 0x55,
    0x54, 0x53, 0x53, 0x52, 0x51, 0x50, 0x4F, 0x4E, 0x4D, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48, 0x48,
    0x47, 0x46, 0x45, 0x44, 0x43, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3F, 0x3E, 0x3D, 0x3C, 0x3C, 0x3B,
    0x3A, 0x39, 0x39, 0x38, 0x37, 0x36, 0x36, 0x35, 0x34, 0x33, 0x33, 0x32, 0x31, 0x31, 0x30, 0x2F,
    0x2E, 0x2E, 0x2D, 0x2C, 0x2C, 0x2B, 0x2A, 0x2A, 0x29, 0x28, 0x28, 0x27, 0x26, 0x26, 0x25, 0x24,
    0x24, 0x23, 0x22, 0x22, 0x21, 0x20, 0x20, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1B, 0x1B, 0x1A,
    0x19, 0x19, 0x18, 0x18, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x12, 0x12, 0x11, 0x11,
    0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08,
    0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00,
};

// Count leading zeros.
// I know, there is more complicated algo, but meh... I'm lazy
static inline int CLZ (u16 rs)
{
    u32 n, m;
    for(n=0, m=1<<15; n<16; n++, m>>=1)
    {
        if (rs & m) break;
    }
    return 16 + n;
}

// inputs are 0.16.0, returns 0.16.16 fixed-point
static inline u32 DIVIDE(u16 n, u16 d) {
    if (n < d * 2) {    
        int zeros = CLZ ( d ) - 14;
        u32 a3 = (d << zeros) >> 2;
        s32 t6 = unrt[(( a3 + 64) >> 7) - 256] + 257;
        s32 t8 = 128 - t6 * a3;
        s32 t7 = (t8 >> 8) & 0x1FFFF;
        s32 t4 = t7 * t6 + 128;
        s32 t3 = t4 >> 8;
        u32 reciprocal = t3 << 14;
        u64 res = 0x80000000 + (u64)(n << zeros) * (u64)(reciprocal);
        return res >> 32;
    }

    return 0xffffffff;
}

}}}
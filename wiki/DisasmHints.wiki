#summary Quirks of PSP CPU disassembly.
#labels Allegrex,instructions

= Introduction =

PSP has custom CPU named Allegrex. It has additional MIPS instructions + VFPU (vector FPU) coprocessor.

On this page you can find quick description of these weird instructions, which can be found in disassembly.

=MIPS Extension=

=Small note on VFPU disassembly=

When I write:
{{{
[x] [y] [z] [w]
}}}
this mean single VFPU quad vector

When I write:
{{{
block number:
   [0] [1] [2] [3]
   [4] [5] [6] [7]
   [8] [9] [A] [B]
   [C] [D] [E] [F]
}}}
this mean contents of whole VFPU 'block'

It is very convenient to represent VFPU disassembly by steps, as content of its registers, for example:

{{{
2:
        [L11L12] [L33] [VXY0] []
        [L13L21] [RBK] [VZ0]  []
        [L22L23] [GBK] [VXY1] []
        [L31L32] [BBK] [VZ1]  []

        0x0000DCB0: 0xDB8800A0 '....' - lv.q       C200, 160($gp)       // L11L12
        0x0000DCB4: 0xDB8900B0 '....' - lv.q       C210, 176($gp)       // L33
        0x0000DCB8: 0xDB8A0000 '....' - lv.q       C220, 0($gp)
}}}

This writings represent final result of block #2 after three subsequent lv.q instructions.

For more details on VFPU registers look here: <a href="http://wiki.fx-world.org/doku.php?id=general:vfpu_registers">VFPU Register Mapping</a>

=VFPU Load/Store with 'shuffle'=

==lvl.q: Load Quad Word Left to VFPU==

||offset % 16||address & ~0xf||vfpu||
||+0||`[1]` `[2]` `[3]` `[4]`||`[-]` `[-]` `[-]` `[1]`||
||+4||`[1]` `[2]` `[3]` `[4]`||`[-]` `[-]` `[1]` `[2]`||
||+8||`[1]` `[2]` `[3]` `[4]`||`[-]` `[1]` `[2]` `[3]`||
||+12||`[1]` `[2]` `[3]` `[4]`||`[1]` `[2]` `[3]` `[4]`||

`[-]` mean keep unchanged

==lvr.q: Load Quad Word Right to VFPU==

||offset % 16||address & ~0xf||vfpu||
||+0||`[1]` `[2]` `[3]` `[4]`||`[1]` `[2]` `[3]` `[4]`||
||+4||`[1]` `[2]` `[3]` `[4]`||`[2]` `[3]` `[4]` `[-]`||
||+8||`[1]` `[2]` `[3]` `[4]`||`[3]` `[4]` `[-]` `[-]`||
||+12||`[1]` `[2]` `[3]` `[4]`||`[4]` `[-]` `[-]` `[-]`||

`[-]` mean keep unchanged

==svl.q: Store Quad Word Left from VFPU==

||offset % 16||vfpu||address & ~0xf||
||+0||`[1]` `[2]` `[3]` `[4]`||`[4]` `[-]` `[-]` `[-]`||
||+4||`[1]` `[2]` `[3]` `[4]`||`[3]` `[4]` `[-]` `[-]`||
||+8||`[1]` `[2]` `[3]` `[4]`||`[2]` `[3]` `[4]` `[-]`||
||+12||`[1]` `[2]` `[3]` `[4]`||`[1]` `[2]` `[3]` `[4]`||

`[-]` mean keep unchanged

==svr.q: Store Quad Word Right from VFPU==

||offset % 16||vfpu||address & ~0xf||
||+0||`[1]` `[2]` `[3]` `[4]`||`[1]` `[2]` `[3]` `[4]`||
||+4||`[1]` `[2]` `[3]` `[4]`||`[-]` `[1]` `[2]` `[3]`||
||+8||`[1]` `[2]` `[3]` `[4]`||`[-]` `[-]` `[1]` `[2]`||
||+12||`[1]` `[2]` `[3]` `[4]`||`[-]` `[-]` `[-]` `[1]`||

`[-]` mean keep unchanged

Example of use:<br>
Some piece of GTE calculations require to "push" FIFO registers:<br>
{{{
RGB0 = RGB1
RGB1 = RGB2
RGB2 = RGB
}}}

So we do:
{{{
lv.q      C000, &gteData[20]
.... do some calculations of RGB value, so C000 would be:
[RGB0] [RGB1] [RGB2] [RGB]
svl.q     C000, &gteData[22]
It writes to memory:
[RGB0] [RGB1] [RGB2] [RES1] <= [RGB1] [RGB2] [RGB] [unchanged]
}}}

=VFPU Simple=

=VFPU Not Simple :)=
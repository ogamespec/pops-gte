// GTE Divider by org. errrr... by Sony :P
// Based on Pops hacking: http://code.google.com/p/pops-gte

// UNR table.
// Should be hardwired somewhere in CPU chip.
// If someone wish to decap PSX CPU I have bunch of them, contact me ogamespec@gmail.com, I'll send it free.
static u8 unrt[] = {
    0xFF, 0xFD, 0xFB, 0xF9, 0xF7, 0xF5, 0xF3, 0xF1, 0xEF, 0xEE, 0xEC, 0xEA, 0xE8, 0xE6, 0xE4, 0xE3,
    0xE1, 0xDF, 0xDD, 0xDC, 0xDA, 0xD8, 0xD6, 0xD5, 0xD3, 0xD1, 0xD0, 0xCE, 0xCD, 0xCB, 0xC9, 0xC8,
    0xC6, 0xC5, 0xC3, 0xC1, 0xC0, 0xBE, 0xBD, 0xBB, 0xBA, 0xB8, 0xB7, 0xB5, 0xB4, 0xB2, 0xB1, 0xB0,
    0xAE, 0xAD, 0xAB, 0xAA, 0xA9, 0xA7, 0xA6, 0xA4, 0xA3, 0xA2, 0xA0, 0x9F, 0x9E, 0x9C, 0x9B, 0x9A,
    0x99, 0x97, 0x96, 0x95, 0x94, 0x92, 0x91, 0x90, 0x8F, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x87, 0x86,
    0x85, 0x84, 0x83, 0x82, 0x81, 0x7F, 0x7E, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x78, 0x77, 0x75, 0x74,
    0x73, 0x72, 0x71, 0x70, 0x6F, 0x6E, 0x6D, 0x6C, 0x6B, 0x6A, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64,
    0x63, 0x62, 0x61, 0x60, 0x5F, 0x5E, 0x5D, 0x5D, 0x5C, 0x5B, 0x5A, 0x59, 0x58, 0x57, 0x56, 0x55,
    0x54, 0x53, 0x53, 0x52, 0x51, 0x50, 0x4F, 0x4E, 0x4D, 0x4D, 0x4C, 0x4B, 0x4A, 0x49, 0x48, 0x48,
    0x47, 0x46, 0x45, 0x44, 0x43, 0x43, 0x42, 0x41, 0x40, 0x3F, 0x3F, 0x3E, 0x3D, 0x3C, 0x3C, 0x3B,
    0x3A, 0x39, 0x39, 0x38, 0x37, 0x36, 0x36, 0x35, 0x34, 0x33, 0x33, 0x32, 0x31, 0x31, 0x30, 0x2F,
    0x2E, 0x2E, 0x2D, 0x2C, 0x2C, 0x2B, 0x2A, 0x2A, 0x29, 0x28, 0x28, 0x27, 0x26, 0x26, 0x25, 0x24,
    0x24, 0x23, 0x22, 0x22, 0x21, 0x20, 0x20, 0x1F, 0x1E, 0x1E, 0x1D, 0x1D, 0x1C, 0x1B, 0x1B, 0x1A,
    0x19, 0x19, 0x18, 0x18, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x12, 0x12, 0x11, 0x11,
    0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x08,
    0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00,
};

// Count leading zeros.
// I know, there is more complicated algo, but meh... I'm lazy
static inline int CLZ (u32 rs)
{
    u32 n, m;
    for(n=0, m=1<<31; n<32; n++, m>>=1)
    {
        if (rs & m) break;
    }
    return n;
}

// inputs are 0.16.0, returns 0.16.16 fixed-point
static inline u32 DIVIDE(u16 n, u16 d) {
    // no need to check n >= 0, because it cannot be greater 0x7FFF (0x7FFF * 2 = 0xFFFE, but 0x8000 * 2 = 0x10000 = 0 already)
	if (n < d * 2) {    
        int zeros = CLZ ( d ) - 14;
        u32 a3 = (d << zeros) >> 2;
        s32 t6 = unrt[(( a3 + 64) >> 7) - 256] + 257;
        s32 t8 = 128 - t6 * a3;
        s32 t7 = (t8 >> 8) & 0x1FFFF;
        s32 t4 = t7 * t6 + 128;
        s32 t3 = t4 >> 8;
        u32 reciprocal = t3 << 14;
        u64 res = 0x80000000 + (u64)(n << zeros) * (u64)(reciprocal);
        return res >> 32;

        // Don't ask me how does it work. Honestly, I don't understand it at all ^_^
	}

	return 0xffffffff;
}

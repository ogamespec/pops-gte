
RTPS Required cycles: 14

Function: Coordinate transformation and perspective transformation

Calculations:
(1.31.12) SSX = TRX + R11*VX0 + R12*VY0 + R13*VZ0; <1>
(1.31.12) SSY = TRY + R21*VX0 + R22*VY0 + R23*VZ0; <2>
(1.31.12) SSZ = TRZ + R31*VX0 + R32*VY0 + R33*VZ0; <3>
(1.15. 0) IR1 = limA1S(SSX);
(1.15. 0) IR2 = limA2S(SSY);
(1.15. 0) IR3 = limA3S(SSZ);
(0.16. 0) SZx(0) <- SZ0(1) <- SZ1(2) <- SZ2(3) <- limC(SSZ);
(1.27.16) SX = OFX + IR1*(H/SZ); <4>
(1.27.16) SY = OFY + IR2*(H/SZ); <4>
(1.19.24) P = DQB + DQA*(H/SZ); <4>
(1. 3.12) IR0 = limE(P)
(1.15. 0) SX0 <- SX1 <- SX2 <- limD1(SX);
(1.15. 0) SY0 <- SY1 <- SY2 <- limD2(SY);
(1. 7.24) MAC0 = P;
(1.31. 0) MAC1 = SSX;
(1.31. 0) MAC2 = SSY;
(1.31. 0) MAC3 = SSZ;

RTPS:

Pcsx:

#define GTE_RTPS1(vn) { \
        gteMAC1 = FNC_OVERFLOW1(((signed long)(gteR11*gteVX##vn + gteR12*gteVY##vn + gteR13*gteVZ##vn)>>12) + gteTRX); \
        gteMAC2 = FNC_OVERFLOW2(((signed long)(gteR21*gteVX##vn + gteR22*gteVY##vn + gteR23*gteVZ##vn)>>12) + gteTRY); \
        gteMAC3 = FNC_OVERFLOW3(((signed long)(gteR31*gteVX##vn + gteR32*gteVY##vn + gteR33*gteVZ##vn)>>12) + gteTRZ); \
}

#define GTE_RTPS2(vn, vm) { \
        if (gteSZ##vn == 0) { \
                FDSZ = 2 << 16; gteFLAG |= 1<<17; \
        } else { \
                FDSZ = ((u64)gteH << 32) / ((u64)gteSZ##vn << 16); \
                if ((u64)FDSZ > (2 << 16)) { FDSZ = 2 << 16; gteFLAG |= 1<<17; } \
        } \
 \
        gteSX##vm = FlimG1((gteOFX + (((s64)((s64)gteIR1 << 16) * FDSZ) >> 16)) >> 16); \
        gteSY##vm = FlimG2((gteOFY + (((s64)((s64)gteIR2 << 16) * FDSZ) >> 16)) >> 16); \
}

#define GTE_RTPS3() { \
        FDSZ = (s64)((s64)gteDQB + (((s64)((s64)gteDQA << 8) * FDSZ) >> 8)); \
        gteMAC0 = FDSZ; \
        gteIR0  = FlimE(FDSZ >> 12); \
}


        s64 FDSZ;

        gteFLAG = 0;

        GTE_RTPS1(0);

        MAC2IR();

        gteSZ0 = gteSZ1;
        gteSZ1 = gteSZ2;
        gteSZ2 = gteSZ3;
        gteSZ3 = FlimC(gteMAC3);
        
        gteSXY0 = gteSXY1;
        gteSXY1 = gteSXY2;

        GTE_RTPS2(3, 2);
        gteSXYP = gteSXY2;

        GTE_RTPS3();

        SUM_FLAG;

Pops:



0x0000DEFC:     // RTPS

7:
        [SXY0] [SZ0] [] []
        [SXY1] [SZ1] [] []
        [SXY2] [SZ2] [] []
        [SXYP] [SZ3] [] []

        gteSXY0 = gteSXY1
        gteSXY1 = gteSXY2
        gteSXY2 = gteSXYP

        gteSZ0 = gteSZ1
        gteSZ1 = gteSZ2
        gteSZ2 = gteSZ3

        0x0000DEFC: 0xDB9C0030 '0...' - lv.q       C700, 48($gp)    // SXY0
        0x0000DF00: 0xDB9D0040 '@...' - lv.q       C710, 64($gp)    // SZ0
        0x0000DF04: 0x2785FFFC '...'' - addiu      $a1, $gp, -4
        0x0000DF08: 0xF79C0038 '8...' - svl.q      C700, 56($gp)    // SXY2
        0x0000DF0C: 0xF79D0048 'H...' - svl.q      C710, 72($gp)    // SZ2

loc_0000DF10:           ; Refs: 0x0000E374 

        FLAG = 0

        0x0000DF10: 0x24010000 '...$' - li         $at, 0
        0x0000DF14: 0x03803021 '!0..' - move       $a2, $gp

loc_0000DF18:           ; Refs: 0x0000E0B4 

        Acc = R11 * VX0
        Acc += R12 * VY0
        a2 += 8
        v1 = 32767
        Acc += R13 * VZ0
        v0 = -32768
        a0 = Lo
        Acc = R21 * VX0
        a0 = a0 >> 12
        a0 = a0 + TRX
->      MAC1 = ((R11 * VX0 + R12 * VY0 + R13 * VZ0) >> 12) + TRX
        Acc += R22 * VY0
        t0 = C_MAC1 = min ( max(MAC1,-32768), 32767)
->      a0 = (t0 != MAC1) << 24
        Acc += R23 * VZ0
        t5 = Lo
        Acc = R31 * VX0
        t5 = t5 >> 12
        t5 = t5 + TRY
->      MAC2 = ((R21 * VX0 + R22 * VY0 + R23 * VZ0) >> 12) + TRY
        t1 = C_MAC2 = min (max (MAC2,-32768), 32767) 
        Acc += R32 * VY0
        Acc += R33 * VZ0
        t8 = 0xFFFF
->      a0 |= (t1 != MAC2) << 23
        t2 = Lo
        t2 = t2 >> 12
        t2 = t2 + TRZ
->      MAC3 = ((R31 * VX0 + R32 * VY0 + R33 * VZ0) >> 12) + TRZ
        a3 = 0xFFFF < t2
        t5 = H < (MAC3 * 2)
        a0 |= (MAC3 > 0xFFFF) << 18
        if ((MAC3 * 2) > H) {
                t3 = min (MAC3, 0xFFFF)
                Acc = 0x80000000
                a3 = CLZ (t3) - 14
                SZ3 = t3
                t4 = H << a3
                Acc += (H << a3) * reciprocalTable[t3 << a3]
                t5 = OFY
                t7 = OFX >> 31
                t3 = min (Hi, 0x1FFFF)
        }
        else {
                t5 = OFY
                SZ3 = max (MAC3, 0)
                t7 = OFX >> 31
                a0 |= (1 << 17)
                t3 = 0x1FFFF
        }

        0x0000DF18: 0x87880080 '....' - lh         $t0, 128($gp)        // R11
        0x0000DF1C: 0x84CE0000 '....' - lh         $t6, 0($a2)          // VX0   (VX0/VX1/VX2 for RTPT)
        0x0000DF20: 0x84CF0002 '....' - lh         $t7, 2($a2)          // VY0   (VY0/VY1/VY2 for RTPT)
        0x0000DF24: 0x84D80004 '....' - lh         $t8, 4($a2)          // VZ0   (VZ0/VZ1/VZ2 for RTPT)
        0x0000DF28: 0x010E0018 '....' - mult       $t0, $t6
        0x0000DF2C: 0x878C0082 '....' - lh         $t4, 130($gp)        // R12
        0x0000DF30: 0x878D0084 '....' - lh         $t5, 132($gp)        // R13
        0x0000DF34: 0x87880086 '....' - lh         $t0, 134($gp)        // R21
        0x0000DF38: 0x018F001C '....' - madd       $t4, $t7
        0x0000DF3C: 0x878C0088 '....' - lh         $t4, 136($gp)        // R22
        0x0000DF40: 0x24C60008 '...$' - addiu      $a2, $a2, 8
        0x0000DF44: 0x8F870094 '....' - lw         $a3, 148($gp)        // TRX
        0x0000DF48: 0x24037FFF '...$' - li         $v1, 32767
        0x0000DF4C: 0x01B8001C '....' - madd       $t5, $t8
        0x0000DF50: 0x878D008A '....' - lh         $t5, 138($gp)        // R23
        0x0000DF54: 0x878B008C '....' - lh         $t3, 140($gp)        // R31
        0x0000DF58: 0x24028000 '...$' - li         $v0, -32768
        0x0000DF5C: 0x00002012 '. ..' - mflo       $a0
        0x0000DF60: 0x010E0018 '....' - mult       $t0, $t6
        0x0000DF64: 0x00042303 '.#..' - sra        $a0, $a0, 12
        0x0000DF68: 0x00872021 '! ..' - addu       $a0, $a0, $a3
        0x0000DF6C: 0xAF840064 'd...' - sw         $a0, 100($gp)        // MAC1
        0x0000DF70: 0x018F001C '....' - madd       $t4, $t7
        0x0000DF74: 0x0082402C ',@..' - max        $t0, $a0, $v0
        0x0000DF78: 0x0103402D '-@..' - min        $t0, $t0, $v1
        0x0000DF7C: 0x00882023 '# ..' - subu       $a0, $a0, $t0
        0x0000DF80: 0x0004202B '+ ..' - sltu       $a0, $zr, $a0
        0x0000DF84: 0x01B8001C '....' - madd       $t5, $t8
        0x0000DF88: 0x00042600 '.&..' - sll        $a0, $a0, 24
        0x0000DF8C: 0x8F870098 '....' - lw         $a3, 152($gp)        // TRY
        0x0000DF90: 0x878C008E '....' - lh         $t4, 142($gp)        // R32
        0x0000DF94: 0x00006812 '.h..' - mflo       $t5
        0x0000DF98: 0x016E0018 '..n.' - mult       $t3, $t6
        0x0000DF9C: 0x000D6B03 '.k..' - sra        $t5, $t5, 12
        0x0000DFA0: 0x01A76821 '!h..' - addu       $t5, $t5, $a3
        0x0000DFA4: 0xAF8D0068 'h...' - sw         $t5, 104($gp)        // MAC2
        0x0000DFA8: 0x01A2482C ',H..' - max        $t1, $t5, $v0
        0x0000DFAC: 0x018F001C '....' - madd       $t4, $t7
        0x0000DFB0: 0x878C0090 '....' - lh         $t4, 144($gp)        // R33
        0x0000DFB4: 0x0123482D '-H#.' - min        $t1, $t1, $v1
        0x0000DFB8: 0x8F87009C '....' - lw         $a3, 156($gp)        // TRZ
        0x0000DFBC: 0x01A96823 '#h..' - subu       $t5, $t5, $t1
        0x0000DFC0: 0x0198001C '....' - madd       $t4, $t8
        0x0000DFC4: 0x3418FFFF '...4' - li         $t8, 0xFFFF
        0x0000DFC8: 0x978C00E8 '....' - lhu        $t4, 232($gp)        // H
        0x0000DFCC: 0x000D682B '+h..' - sltu       $t5, $zr, $t5
        0x0000DFD0: 0x7DA4BDC4 '...}' - ins        $a0, $t5, 23, 1
        0x0000DFD4: 0x00005012 '.P..' - mflo       $t2
        0x0000DFD8: 0x000A5303 '.S..' - sra        $t2, $t2, 12
        0x0000DFDC: 0x01475021 '!PG.' - addu       $t2, $t2, $a3	// SSZ result
        0x0000DFE0: 0x030A382B '+8..' - sltu       $a3, $t8, $t2
        0x0000DFE4: 0x000A6840 '@h..' - sll        $t5, $t2, 1
        0x0000DFE8: 0x018D682A '*h..' - slt        $t5, $t4, $t5
        0x0000DFEC: 0x11A00059 'Y...' - beqz       $t5, loc_0000E154
        0x0000DFF0: 0x7CE49484 '...|' - ins        $a0, $a3, 18, 1

        t3 = min (MAC3, 0xFFFF)
        Acc = 0x80000000
        a3 = CLZ (t3) - 14
        SZ3 = t3
        t4 = H << a3
        Acc += (H << a3) * reciprocalTable[t3 << a3]
        t5 = OFY
        t7 = OFX >> 31
        t3 = min (Hi, 0x1FFFF)

//	SZ3 = min (MAC3, 0xFFFF)
//	shift = clz ( SZ3 ) - 14
//	Acc = 0x80000000 + (H << shift) * reciprocalTable[SZ3 << shift];
//	t3 = min ( HI, 0x1FFFF );


        0x0000DFF4: 0x0158582D '-XX.' - min        $t3, $t2, $t8
        0x0000DFF8: 0x34078000 '...4' - li         $a3, 0x8000
        0x0000DFFC: 0x00FC0019 '....' - multu      $a3, $gp
        0x0000E000: 0x01603816 '.8`.' - clz        $a3, $t3
        0x0000E004: 0x24E7FFF2 '...$' - addiu      $a3, $a3, -14
        0x0000E008: 0x00EB6804 '.h..' - sllv       $t5, $t3, $a3
        0x0000E00C: 0x3C0F0000 '...<' - lui        $t7, 0x0
        0x0000E010: 0x01AF6821 '!h..' - addu       $t5, $t5, $t7
        0x0000E014: 0x8DAD198C '....' - lw         $t5, 6540($t5)
        0x0000E018: 0xA4AB0050 'P...' - sh         $t3, 80($a1)         // SZ3 for RTPS, SZ1/SZ2/SZ3 for RTPT
        0x0000E01C: 0x00EC6004 '.`..' - sllv       $t4, $t4, $a3
        0x0000E020: 0x018D001D '....' - maddu      $t4, $t5
        0x0000E024: 0x8F8C00E0 '....' - lw         $t4, 224($gp)        // OFX
        0x0000E028: 0x8F8D00E4 '....' - lw         $t5, 228($gp)        // OFY
        0x0000E02C: 0x3787FFFF '...7' - ori        $a3, $gp, 0xFFFF
        0x0000E030: 0x000C7FC3 '....' - sra        $t7, $t4, 31
        0x0000E034: 0x00005810 '.X..' - mfhi       $t3
        0x0000E038: 0x0167582D '-Xg.' - min        $t3, $t3, $a3

loc_0000E03C:           ; Refs: 0x0000E16C 

        a1 += 4

        Acc = [OFX >> 31]:[OFX] + C_MAC1 * t3           // SX
        t4 = (Hi << 16) | (Lo >> 16)
        t5 = min (max(t4, -1024), 1023)
        a0 |= (t5 != t4) << 14

        Acc = [OFY >> 31]:[OFY] + C_MAC2 * t3           // SY
        t4 = (Hi << 16) | (Lo >> 16)
        a3 = min (max(t4, -1024), 1023)
        a0 |= (t4 != a3) << 13
        FLAG |= a0

        gteSXY2 = (t5 & 0xFFFF) | (a3 << 16);

        0x0000E03C: 0x01800013 '....' - mtlo       $t4
        0x0000E040: 0x01E00011 '....' - mthi       $t7
        0x0000E044: 0x010B001C '....' - madd       $t0, $t3
        0x0000E048: 0x24A50004 '...$' - addiu      $a1, $a1, 4
        0x0000E04C: 0x240FFC00 '...$' - li         $t7, -1024
        0x0000E050: 0x241803FF '...$' - li         $t8, 1023
        0x0000E054: 0x000D3FC3 '.?..' - sra        $a3, $t5, 31
        0x0000E058: 0x00006012 '.`..' - mflo       $t4
        0x0000E05C: 0x01A00013 '....' - mtlo       $t5
        0x0000E060: 0x00006810 '.h..' - mfhi       $t5
        0x0000E064: 0x00E00011 '....' - mthi       $a3
        0x0000E068: 0x012B001C '..+.' - madd       $t1, $t3
        0x0000E06C: 0x000C6402 '.d..' - srl        $t4, $t4, 16
        0x0000E070: 0x7DACFC04 '...}' - ins        $t4, $t5, 16, 16
        0x0000E074: 0x018F682C ',h..' - max        $t5, $t4, $t7
        0x0000E078: 0x01B8682D '-h..' - min        $t5, $t5, $t8
        0x0000E07C: 0x018D6023 '#`..' - subu       $t4, $t4, $t5
        0x0000E080: 0x000C602B '+`..' - sltu       $t4, $zr, $t4
        0x0000E084: 0x7D847384 '.s.}' - ins        $a0, $t4, 14, 1
        0x0000E088: 0x00006012 '.`..' - mflo       $t4
        0x0000E08C: 0x00003810 '.8..' - mfhi       $a3
        0x0000E090: 0x000C6402 '.d..' - srl        $t4, $t4, 16
        0x0000E094: 0x7CECFC04 '...|' - ins        $t4, $a3, 16, 16
        0x0000E098: 0x018F382C ',8..' - max        $a3, $t4, $t7
        0x0000E09C: 0x00F8382D '-8..' - min        $a3, $a3, $t8
        0x0000E0A0: 0x01876023 '#`..' - subu       $t4, $t4, $a3
        0x0000E0A4: 0x000C602B '+`..' - sltu       $t4, $zr, $t4
        0x0000E0A8: 0x7D846B44 'Dk.}' - ins        $a0, $t4, 13, 1
        0x0000E0AC: 0x00240825 '%.$.' - or         $at, $at, $a0
        0x0000E0B0: 0x7CEDFC04 '...|' - ins        $t5, $a3, 16, 16
        0x0000E0B4: 0x1785FF98 '....' - bne        $gp, $a1, loc_0000DF18
        0x0000E0B8: 0xACAD0038 '8...' - sw         $t5, 56($a1)         // SXY0/SXY1/SXY2 for RTPT, SXY2 for RTPS

        gteMAC3 = MAC3
        Acc = [DQB >> 31]:[DQB] + DQA * t3

        t6 = C_MAC3 = min (max(MAC3, -32768), 32767)
        at |= (MAC3 != C_MAC3) << 22

        IR1 = C_MAC1
        IR2 = C_MAC2
        IR3 = C_MAC3

        a0 = (Hi & 0x000fffff) | ( (Lo >> 12) << 20 );
        MAC0 = Lo
        if ( (Lo >> 12) < 4097 ) {
                IR0 = a0
                S330 = at
        }
        else {
                at |= (a0 > 0x80000) << 15
                at |= (a0 < ~0x80000) << 16
                at |= 0x1000
                IR0 = max (min (a0, 4096), 0)
                S330 = at
        }

        0x0000E0BC: 0xAF8A006C 'l...' - sw         $t2, 108($gp)        // MAC3
        0x0000E0C0: 0x8F9800F0 '....' - lw         $t8, 240($gp)        // DQB
        0x0000E0C4: 0x878500EC '....' - lh         $a1, 236($gp)        // DQA
        0x0000E0C8: 0x001827C3 '.'..' - sra        $a0, $t8, 31
        0x0000E0CC: 0x03000013 '....' - mtlo       $t8
        0x0000E0D0: 0xAF880024 '$...' - sw         $t0, 36($gp)         // IR1
        0x0000E0D4: 0x00800011 '....' - mthi       $a0
        0x0000E0D8: 0x00AB001C '....' - madd       $a1, $t3
        0x0000E0DC: 0xAF890028 '(...' - sw         $t1, 40($gp)         // IR2
        0x0000E0E0: 0x0142702C ',pB.' - max        $t6, $t2, $v0
        0x0000E0E4: 0x01C3702D '-p..' - min        $t6, $t6, $v1
        0x0000E0E8: 0x014E5023 '#PN.' - subu       $t2, $t2, $t6
        0x0000E0EC: 0x000A502B '+P..' - sltu       $t2, $zr, $t2
        0x0000E0F0: 0x7D41B584 '..A}' - ins        $at, $t2, 22, 1
        0x0000E0F4: 0xAF8E002C ',...' - sw         $t6, 44($gp)         // IR3
        0x0000E0F8: 0x00005812 '.X..' - mflo       $t3
        0x0000E0FC: 0x00006010 '.`..' - mfhi       $t4
        0x0000E100: 0x000B2303 '.#..' - sra        $a0, $t3, 12
        0x0000E104: 0x7D84FD04 '...}' - ins        $a0, $t4, 20, 12
        0x0000E108: 0x2C981001 '...,' - sltiu      $t8, $a0, 4097
        0x0000E10C: 0x13000004 '....' - beqz       $t8, loc_0000E120
        0x0000E110: 0xAF8B0060 '`...' - sw         $t3, 96($gp)         // MAC0
        0x0000E114: 0x48E1000F '...H' - mtv        $at, S330
        0x0000E118: 0x03E00008 '....' - jr         $ra
        0x0000E11C: 0xAF840020 ' ...' - sw         $a0, 32($gp)         // IR0

loc_0000E120:           ; Refs: 0x0000E10C 

        at |= (a0 > 0x80000) << 15
        at |= (a0 < ~0x80000) << 16
        at |= 0x1000
        IR0 = max (min (a0, 4096), 0)
        S330 = at

        0x0000E120: 0x24181000 '...$' - li         $t8, 4096
        0x0000E124: 0x3C0A0008 '...<' - lui        $t2, 0x8
        0x0000E128: 0x0144402A '*@D.' - slt        $t0, $t2, $a0
        0x0000E12C: 0x01405027 ''P@.' - not        $t2, $t2
        0x0000E130: 0x008A482A '*H..' - slt        $t1, $a0, $t2
        0x0000E134: 0x7D090844 'D..}' - ins        $t1, $t0, 1, 1
        0x0000E138: 0x7D2183C4 '..!}' - ins        $at, $t1, 15, 2
        0x0000E13C: 0x34211000 '..!4' - ori        $at, $at, 0x1000
        0x0000E140: 0x0098202D '- ..' - min        $a0, $a0, $t8
        0x0000E144: 0x0080202C ', ..' - max        $a0, $a0, $zr
        0x0000E148: 0x48E1000F '...H' - mtv        $at, S330
        0x0000E14C: 0x03E00008 '....' - jr         $ra
        0x0000E150: 0xAF840020 ' ...' - sw         $a0, 32($gp)         // IR0

loc_0000E154:           ; Refs: 0x0000DFEC 
        t5 = OFY
        SZ3 = max (t2, 0)
        t7 = OFX >> 31
        a0 |= (1 << 17)
        t3 = 0x1FFFF
        goto loc_0000E03C

        0x0000E154: 0x8F8C00E0 '....' - lw         $t4, 224($gp)        // OFX
        0x0000E158: 0x8F8D00E4 '....' - lw         $t5, 228($gp)        // OFY
        0x0000E15C: 0x0140582C ',X@.' - max        $t3, $t2, $zr
        0x0000E160: 0xA4AB0050 'P...' - sh         $t3, 80($a1)         // SZ3 for RTPS, SZ1/SZ2/SZ3 for RTPT
        0x0000E164: 0x378BFFFF '...7' - ori        $t3, $gp, 0xFFFF
        0x0000E168: 0x000C7FC3 '....' - sra        $t7, $t4, 31
        0x0000E16C: 0x0800380F '.8..' - j          loc_0000E03C
        0x0000E170: 0x7D648C44 'D.d}' - ins        $a0, $t3, 17, 1

RTPT:

        0x0000E36C: 0x9788004C 'L...' - lhu        $t0, 76($gp)         // SZ3
        0x0000E370: 0x2785FFF4 '...'' - addiu      $a1, $gp, -12
        0x0000E374: 0x080037C4 '.7..' - j          loc_0000DF10
        0x0000E378: 0xA7880040 '@...' - sh         $t0, 64($gp)         // SZ0

-----------------------

Pseudo-C:

RTPS / RTPT:
{
    s64 FDSZ;

    gteFLAG = 0;

    if (RTPS) {
        gteSXY0 = gteSXY1;
        gteSXY1 = gteSXY2;
        gteSXY2 = gteSXYP;

        gteSZ0 = gteSZ1;
        gteSZ1 = gteSZ2;
        gteSZ2 = gteSZ3;
    }
    if (RTPT) {
        gte SZ0 = gteSZ3;
    }

----

    // RTPT Start
    // For RTPT repeat these steps for VXYZ0 ... VXYZ2 / SZ1 ... SZ3 / SXY0 - SXY2
    // For RTPS VXYZ0 / SZ3 / SXY2 are used only

    gteMAC1 = ((gteR11 * gteVX0 + gteR12 * gteVY0 + gteR13 * gteVZ0) >> 12) + gteTRX;
    gteMAC2 = ((gteR21 * gteVX0 + gteR22 * gteVY0 + gteR23 * gteVZ0) >> 12) + gteTRY;
    gteMAC3 = ((gteR31 * gteVX0 + gteR32 * gteVY0 + gteR33 * gteVZ0) >> 12) + gteTRZ;

    C_MAC1 = min ( max(gteMAC1, -32768), 32767);
    C_MAC2 = min ( max(gteMAC2, -32768), 32767);
    C_MAC3 = min ( max(gteMAC3, -32768), 32767);

    gteFLAG |= (gteMAC1 != C_MAC1) << 24;
    gteFLAG |= (gteMAC2 != C_MAC2) << 23;
    gteFLAG |= (gteMAC3 != C_MAC3) << 22;

----

    gteFLAG |= (gteMAC3 > 0xFFFF) << 18;

    if ((gteMAC3 * 2) > gteH) {
        gteSZ3 = min (gteMAC3, 0xFFFF);
        int zeros = CountLeadingZeros (gteSZ3) - 14;
        FDSZ = 0x80000000 + (gteH << zeros) * *(u32 *)(reciprocalTable + gteSZ3 << zeros);
        FDSZ = min ( (FDSZ >> 32), 0x1FFFF );
    }
    else {
        gteSZ3 = max (gteMAC3, 0);
        FDSZ = 0x1FFFF;
        gteFLAG |= (1 << 17);
    }

----

    s64 Acc = (s64)(OFX) + C_MAC1 * FDSZ;           // SX
    SX = (Hi << 16) | (Lo >> 16);
    C_SX = min (max(SX, -1024), 1023);
    gteFLAG |= (SX != C_SX) << 14;

    s64 Acc = (s64)(OFY) + C_MAC2 * FDSZ;           // SY
    SY = (Hi << 16) | (Lo >> 16);
    C_SY = min (max(SY, -1024), 1023);
    gteFLAG |= (SY != C_SY) << 13;

    gteSXY2 = (C_SX & 0xFFFF) | (C_SY << 16);

    // RTPT End

----

    gteIR1 = C_MAC1;
    gteIR2 = C_MAC2;
    gteIR3 = C_MAC3;
    
    s64 Acc = (s64)(DQB) + DQA * FDSZ;

    a0 = (Hi & 0x000fffff) | ( (Lo >> 12) << 20 );
    gteMAC0 = Lo;
    if ( (Lo >> 12) < 4097 ) {
        gteIR0 = a0;
    }
    else {
        gteFLAG |= (a0 > 524288) << 15;
        gteFLAG |= (a0 < -524289) << 16;
        gteFLAG |= 0x1000;
        gteIR0 = max (min (a0, 4096), 0);
    }

    SUM_FLAG;
}


function CountLeadingZeros (const v: Longword): Longword;
asm
    MOV    EAX, v
    MOV    EDX, 00000020h
    BSF    EAX, EAX
    CMOVZ  EAX, EDX
end;

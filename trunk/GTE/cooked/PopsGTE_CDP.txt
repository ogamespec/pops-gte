CDP: Color Depth Que

CDP Required cycles: 13

Function: Light source calculation

Calculations:
(1.19.24) RRLT = RBK + LR1*IR1 + LR2*IR2 + LR3*IR3; <1>
(1.19.24) GGLT = GBK + LG1*IR1 + LG2*IR2 + LG3*IR3; <2>
(1.19.24) BBLT = BBK + LB1*IR1 + LB2*IR2 + LB3*IR3; <3>
(1. 3.12) RLT = limA1U(RRLT);
(1. 3.12) GLT = limA2U(GGLT);
(1. 3.12) BLT = limA3U(BBLT);
(1.27.16) RR0 = R*RLT + IR0*limA1S(RFC - R*RLT); <1>
(1.27.16) GG0 = G*GLT + IR0*limA2S(GFC - G*GLT); <2>
(1.27.16) BB0 = B*BLT + IR0*limA3S(BFC - B*BLT); <3>
(1.11. 4) IR1 = limA1U(RR0);
(1.11. 4) IR2 = limA2U(GG0);
(1.11. 4) IR3 = limA3U(BB0);
(-. 8. -) CD0 <- CD1 <- CD2 <- CODE
(0. 8. 0) R0 <- R1 <- R2 <- limB1(RR0);
(0. 8. 0) G0 <- G1 <- G2 <- limB2(GG0);
(0. 8. 0) B0 <- B1 <- B2 <- limB3(BB0);
(1.27. 4) MAC1 = RR0;
(1.27. 4) MAC2 = GG0;
(1.27. 4) MAC3 = BB0;


Pcsx:
    double RR0,GG0,BB0;

    gteFLAG = 0;

    RR0 = NC_OVERFLOW1(gteRBK + (gteLR1*gteIR1 +gteLR2*gteIR2 + gteLR3*gteIR3));
    GG0 = NC_OVERFLOW2(gteGBK + (gteLG1*gteIR1 +gteLG2*gteIR2 + gteLG3*gteIR3));
    BB0 = NC_OVERFLOW3(gteBBK + (gteLB1*gteIR1 +gteLB2*gteIR2 + gteLB3*gteIR3));
    gteMAC1 = gteR*RR0 + gteIR0*limA1S(gteRFC-gteR*RR0);
    gteMAC2 = gteG*GG0 + gteIR0*limA2S(gteGFC-gteG*GG0);
    gteMAC3 = gteB*BB0 + gteIR0*limA3S(gteBFC-gteB*BB0);

    MAC2IR1();
    gteRGB0 = gteRGB1;
    gteRGB1 = gteRGB2;
    
    gteR2 = FlimB1(gteMAC1 >> 4);
    gteG2 = FlimB2(gteMAC2 >> 4);
    gteB2 = FlimB3(gteMAC3 >> 4); gteCODE2 = gteCODE;

    SUM_FLAG


Pops:

VFPU 4:
        [0x100f] [0x20f] [-8f] [7.999756f]
        [0x80f]  [0x10f] [-8f] [7.999756f]
        [0x40f]  [0x08f] [-8f] [7.999756f]
        [0]      [0]     [0]   [0]

5:
    [IR0] [] [] []
    [IR1] [] [] []
    [IR2] [] [] []
    [IR3] [] [] []

2:
    [LR1LR2] [L33] [] [LB3]
    [LR3LG1] [RBK] [] [RFC]
    [LG2LG3] [GBK] [] [GFC]
    [LB1LB2] [BBK] [] [BFC]

0:
    [F LR1 << 16 / 2^28] [F LG1 << 16 / 2^28] [F LB1 << 16 / 2^28] []
    [F LR2 << 16 / 2^28] [F LG2 << 16 / 2^28] [F LB2 << 16 / 2^28] []
    [F LR3 << 16 / 2^28] [F LG3 << 16 / 2^28] [F LB3 * 2^12]       []
    [F RBK / 2^12] [F GBK / 2^12] [F BBK / 2^12] []

2:
    [F IR1 / 2^12] [L33] [] [LB3]
    [F IR2 / 2^12] [RBK] [] [RFC]
    [F IR3 / 2^12] [GBK] [] [GFC]
    [F IR0 / 2^12] [BBK] [] [BFC]

3:
    [] [] [] [0]
    [] [] [] [0]
    [] [] [] [0]
    [] [] [] []

1:
    [] [RR0 = LR1 * IR1 + LR2 * IR2 + LR3 * IR3 + RBK] [] []
    [] [GG0 = LG1 * IR1 + LG2 * IR2 + LG3 * IR3 + GBK] [] []
    [] [BB0 = LB1 * IR1 + LB2 * IR2 + LB3 * IR3 + BBK] [] []
    [] [TRASH]                                   [] []

    0x0000D4A8: 0xDB940020 ' ...' - lv.q       C500, 32($gp)        // IR0
    0x0000D4AC: 0xDB8900B0 '....' - lv.q       C210, 176($gp)       // L33 .. RBK GBK BBK
    0x0000D4B0: 0xDB8800C0 '....' - lv.q       C200, 192($gp)       // LR1LR2 ...
    0x0000D4B4: 0xDB8B00D0 '....' - lv.q       C230, 208($gp)       // LB3 RFC GFC BFC
    0x0000D4B8: 0xD03B0880 '..;.' - vs2i.p     C000, C200
    0x0000D4BC: 0xD03B4881 '.H;.' - vs2i.p     C010, C202
    0x0000D4C0: 0xD29C8080 '....' - vi2f.q     C000, C000, 28
    0x0000D4C4: 0xD29C8181 '....' - vi2f.q     C010, C010, 28
    0x0000D4C8: 0xD28C0B42 'B...' - vi2f.s     S022, S230, 12
    0x0000D4CC: 0xD0004182 '.A..' - vmov.p     C020, C012
    0x0000D4D0: 0xD0002141 'A!..' - vmov.s     S012, S011
    0x0000D4D4: 0xD0000121 '!...' - vmov.s     S011, S010
    0x0000D4D8: 0xD0006001 '.`..' - vmov.s     S010, S003
    0x0000D4DC: 0xD28CC923 '#...' - vi2f.t     R003, C211, 12
    0x0000D4E0: 0xDC000039 '9...' - vpfxs      [y, z, w, x]
    0x0000D4E4: 0xD28C9488 '....' - vi2f.q     C200, C500, 12
    0x0000D4E8: 0xD006800F '....' - vzero.t    C330
    0x0000D4EC: 0xF1888005 '....' - vhtfm4.q   C110, M000, C200

    a0 = RGB

1:
    [ C_RR0 = min(max(RR0, 0), 7.999756f) ] [RR0] [] []
    [ C_GG0 = min(max(GG0, 0), 7.999756f) ] [GG0] [] []
    [ C_BB0 = min(max(BB0, 0), 7.999756f) ] [BB0] [] []
    [] [] [] []

3:
    [] [] [] [C_RR0 != RR0 ? 0x100f : 0]
    [] [] [] [C_GG0 != GG0 ? 0x80f  : 0]
    [] [] [] [C_BB0 != BB0 ? 0x40f  : 0]
    [] [] [] []

0:
    [F RFC / 2^12] [F LG1 << 16 / 2^28] [F LB1 << 16 / 2^28] []
    [F GFC / 2^12] [F LG2 << 16 / 2^28] [F LB2 << 16 / 2^28] []
    [F BFC / 2^12] [F LG3 << 16 / 2^28] [F LB3 * 2^12]       []
    [F RBK / 2^12] [F GBK / 2^12] [F BBK / 2^12] []
    
    0x0000D4F0: 0x8F840018 '....' - lw         $a0, 24($gp)         // RGB
    0x0000D4F4: 0xBFEA0040 '@...' - cache      0xA, 64($ra)
    0x0000D4F8: 0x6DB38504 '...m' - vmax.t     C100, C110, R403
    0x0000D4FC: 0x6D138404 '...m' - vmin.t     C100, C100, C430
    0x0000D500: 0x6C058405 '...l' - vcmp.t     NE, C100, C110
    0x0000D504: 0xD2A6900F '....' - vcmovt.t   C330, C400, 6
    0x0000D508: 0xD28CCB00 '....' - vi2f.t     C000, C231, 12

    v0 = R
    a1 = G
    a2 = B

0:
    [F RFC / 2^12] [F R / 2^8] [] []
    [F GFC / 2^12] [F G / 2^8] [] []
    [F BFC / 2^12] [F B / 2^8] [] []
    [] [] [] []

2:
    [F R / 2^8 * C_RR0] [L33] [] [LB3]
    [F G / 2^8 * C_GG0] [RBK] [] [RFC]
    [F B / 2^8 * C_BB0] [GBK] [] [GFC]
    [F IR0 / 2^12] [BBK] [] [BFC]

7:
    [] [F RFC / 2^12 - F R / 2^8 * C_RR0] [] []
    [] [F GFC / 2^12 - F G / 2^8 * C_GG0] [] []
    [] [F BFC / 2^12 - F B / 2^8 * C_BB0] [] []
    [] [] [] []

    0x0000D50C: 0x7C823800 '.8.|' - ext        $v0, $a0, 0, 8
    0x0000D510: 0x7C853A00 '.:.|' - ext        $a1, $a0, 8, 8
    0x0000D514: 0x7C863C00 '.<.|' - ext        $a2, $a0, 16, 8
    0x0000D518: 0x48E20001 '...H' - mtv        $v0, S010
    0x0000D51C: 0x48E50021 '!..H' - mtv        $a1, S011
    0x0000D520: 0x48E60041 'A..H' - mtv        $a2, S012
    0x0000D524: 0xD2888101 '....' - vi2f.t     C010, C010, 8
    0x0000D528: 0x64048108 '...d' - vmul.t     C200, C010, C100
    0x0000D52C: 0x6088801D '...`' - vsub.t     C710, C000, C200

7:
    [] [RF = F RFC / 2^12 - F R / 2^8 * C_RR0] [C_RF = min (max(RF, -8), 7.999756f) ] []
    [] [GF = F GFC / 2^12 - F G / 2^8 * C_GG0] [C_GF = min (max(GF, -8), 7.999756f) ] []
    [] [BF = F BFC / 2^12 - F B / 2^8 * C_BB0] [C_BF = min (max(BF, -8), 7.999756f) ] []
    [] [] [] []

3:
    [] [] [] [ |RF| >= 7.999756f ? 0x100 :   (C_RR0 != RR0 ? 0x100f : 0) ]
    [] [] [] [ |GF| >= 7.999756f ? 0x80  :   (C_GG0 != GG0 ? 0x80f  : 0) ]
    [] [] [] [ |BF| >= 7.999756f ? 0x40  :   (C_BB0 != BB0 ? 0x40f  : 0) ]
    [] [] [] []

7:
    [] [C_RF * IR0] [C_RF = min (max(RF, -8), 7.999756f) ] []
    [] [C_GF * IR0] [C_GF = min (max(GF, -8), 7.999756f) ] []
    [] [C_BF * IR0] [C_BF = min (max(BF, -8), 7.999756f) ] []
    [] [] [] []

2:
    [RR = F R / 2^8 * C_RR0 + C_RF * IR0] [L33] [] [LB3]
    [GG = F G / 2^8 * C_GG0 + C_GF * IR0] [RBK] [] [RFC]
    [BB = F B / 2^8 * C_BB0 + C_BF * IR0] [GBK] [] [GFC]
    [F IR0 / 2^12] [BBK] [] [BFC]

    0x0000D530: 0x6D929D1E '...m' - vmax.t     C720, C710, C420
    0x0000D534: 0xDD0007E4 '....' - vpfxt      [|x|, |y|, |z|, w]
    0x0000D538: 0x6C1D9303 '...l' - vcmp.t     LE, C430, C710
    0x0000D53C: 0x6D139E1E '...m' - vmin.t     C720, C720, C430
    0x0000D540: 0xD2A6900F '....' - vcmovt.t   C330, C400, 6
    0x0000D544: 0x65689E1D '..he' - vscl.t     C710, C720, S203
    0x0000D548: 0x601D8808 '...`' - vadd.t     C200, C200, C710

0:
    [SAT_RR = CLAMP(RR, 0.0, 1.0)] [I RR * 2^12] [ C_RR = min (max (RR, 0), 7.999756f) ] []
    [SAT_GG = CLAMP(GG, 0.0, 1.0)] [I GG * 2^12] [ C_GG = min (max (GG, 0), 7.999756f) ] []
    [SAT_BB = CLAMP(BB, 0.0, 1.0)] [I BB * 2^12] [ C_BB = min (max (BB, 0), 7.999756f) ] []
    []             []            []              [ RGB >> 1]

7:
    [] [C_RF * IR0] [RGB0] []
    [] [C_GF * IR0] [RGB1] []
    [] [C_BF * IR0] [RGB2] []
    [] []           [RES1] []

    MAC1 = RR
    MAC2 = GG
    MAC3 = BB

    CC[0] = RR != C_RR
    CC[1] = GG != C_GG
    CC[2] = BB != C_BB

0:
    [SAT_RR = CLAMP(RR, 0.0, 1.0)] [I RR * 2^12] [ I C_RR * 2^12 ] [ I RR * 2^31]
    [SAT_GG = CLAMP(GG, 0.0, 1.0)] [I GG * 2^12] [ I C_GG * 2^12 ] [ I GG * 2^31]
    [SAT_BB = CLAMP(BB, 0.0, 1.0)] [I BB * 2^12] [ I C_BB * 2^12 ] [ I BB * 2^31]
    []             []            []                                [ RGB >> 1]

3:
    [] [] [] [ A1 = RR != C_RR ? 0x100 :  ( |RF| >= 7.999756f ? 0x100 :   (C_RR0 != RR0 ? 0x100f : 0) ) ]
    [] [] [] [ A2 = GG != C_GG ? 0x80  :  ( |GF| >= 7.999756f ? 0x80  :   (C_GG0 != GG0 ? 0x80f  : 0) ) ]
    [] [] [] [ A3 = BB != C_BB ? 0x40  :  ( |BF| >= 7.999756f ? 0x40  :   (C_BB0 != BB0 ? 0x40f  : 0) ) ]
    [] [] [] []

    

3:
    [] [] [] [ B1 = RR != SAT_RR ? 0x20 : 0 ]
    [] [] [] [ B2 = GG != SAT_GG ? 0x10 : 0 ]
    [] [] [] [ B3 = BB != SAT_BB ? 0x8  : 0 ]
    [] [A1 + A2 + A3] [A1 + A2 + A3] [A1 + A2 + A3]

    IR1 = C_RR;
    IR2 = C_GG;
    IR3 = C_BB;

    RGB0 = RGB1
    RGB1 = RGB2
    RGB2 = [CODE][BB][GG][RR]

    S330 = (A1 + A2 + A3 + B1 + B2 + B3) << 16

    0x0000D54C: 0x00042042 'B ..' - srl        $a0, $a0, 1
    0x0000D550: 0x48E40063 'c..H' - mtv        $a0, S033
    0x0000D554: 0xDB9E0050 'P...' - lv.q       C720, 80($gp)        // RGB0 RGB1 RGB2 RES1
    0x0000D558: 0x6DB38802 '...m' - vmax.t     C020, C200, R403
    0x0000D55C: 0xD20C8801 '....' - vf2in.t    C010, C200, 12
    0x0000D560: 0xD0048800 '....' - vsat0.t    C000, C200
    0x0000D564: 0x6D138202 '...m' - vmin.t     C020, C020, C430
    0x0000D568: 0xF7810066 'f...' - svr.q      C010, 100($gp)       // MAC1
    0x0000D56C: 0x6C028805 '...l' - vcmp.t     NE, C200, C020
    0x0000D570: 0xD20C8202 '....' - vf2in.t    C020, C020, 12
    0x0000D574: 0xD21F8803 '....' - vf2in.t    C030, C200, 31
    0x0000D578: 0xD2A6900F '....' - vcmovt.t   C330, C400, 6
    0x0000D57C: 0x6C008805 '...l' - vcmp.t     NE, C200, C000
    0x0000D580: 0xD0468F6F 'o.F.' - vfad.t     R313, C330
    0x0000D584: 0xF7820026 '&...' - svr.q      C020, 36($gp)        // IR1
    0x0000D588: 0xD006800F '....' - vzero.t    C330
    0x0000D58C: 0xD2A6910F '....' - vcmovt.t   C330, C410, 6
    0x0000D590: 0xD0468F8F '..F.' - vfad.q     C330, C330
    0x0000D594: 0xD03C83FE '..<.' - vi2uc.q    S723, C030       // fixed
    0x0000D598: 0xF79E0058 'X...' - svl.q      C720, 88($gp)        // RGB0
    0x0000D59C: 0x03E00008 '....' - jr         $ra
    0x0000D5A0: 0xD2700F0F '..p.' - vf2id.s    S330, S330, 16

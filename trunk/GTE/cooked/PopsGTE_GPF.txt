
GPF sf  Required cycles: 5

Function: General purpose interpolation

Items specified using arguments:
||Argument ||Specified content ||Value=0 ||Value=1||
||sf ||Output format ||-- ||Performs calculations on data<br>shifted 12 bits to the left in the<br>IRn register.||

Calculations: (m and n specify the data format of IRp(p=1,2,3) as (1.m.n).)

sf == 0     sf == 1
(1.m+28.n)  (1.m+16.n+12)   IPX = IR0*IR1; <1>
(1.m+28.n)  (1.m+16.n+12)   IPY = IR0*IR2; <2>
(1.m+28.n)  (1.m+16.n+12)   IPZ = IR0*IR3; <3>
(1.m.n)     (1.m.n)         IR1 = limA1S(IPX);
(1.m.n)     (1.m.n)         IR2 = limA2S(IPY);
(1.m.n)     (1.m.n)         IR3 = limA3S(IPZ);
(1.m+16.n)  (1.m+16.n)      MAC1 = IPX;
(1.m+16.n)  (1.m+16.n)      MAC2 = IPY(1.m+16.n) (1.m+16.n)     MAC3 = IPZ;
(-.8.-)     CD0 <- CD1 <- CD2 <- CODE
(0. 0. 8)   R0 <- R1 <- R2 <- limB1(IPX);
(0. 0. 8)   G0 <- G1 <- G2 <- limB2(IPY);
(0. 0. 8)   B0 <- B1 <- B2 <- limB3(IPZ);

GPF:

Ну тут почти нет разницы с GPL.




    0x00000F8C: 0x7C8504C0 '...|' - ext        $a1, $a0, 19, 1
    0x00000F90: 0x00051840 '@...' - sll        $v1, $a1, 1
    0x00000F94: 0x00652021 '! e.' - addu       $a0, $v1, $a1
    0x00000F98: 0x27BDFFF0 '...'' - addiu      $sp, $sp, -16
    0x00000F9C: 0x00042880 '.(..' - sll        $a1, $a0, 2
    0x00000FA0: 0xAFBF0000 '....' - sw         $ra, 0($sp)
    0x00000FA4: 0x0C0038E3 '.8..' - jal        sub_0000E38C
    0x00000FA8: 0x00002021 '! ..' - move       $a0, $zr
    0x00000FAC: 0x8FBF0000 '....' - lw         $ra, 0($sp)
    0x00000FB0: 0x03E00008 '....' - jr         $ra
    0x00000FB4: 0x27BD0010 '...'' - addiu      $sp, $sp, 16

sub_0000E38C:       ; Refs: 0x00000FA4 
    0x0000E38C: 0x8F880020 ' ...' - lw         $t0, 32($gp)     // gteIR0
    0x0000E390: 0x8F8B0024 '$...' - lw         $t3, 36($gp)     // gteIR1
    0x0000E394: 0x8F8C0028 '(...' - lw         $t4, 40($gp)     // gteIR2
    0x0000E398: 0x8F8D002C ',...' - lw         $t5, 44($gp)     // gteIR3
    0x0000E39C: 0x01680018 '..h.' - mult       $t3, $t0     // gteIR1 * gteIR0
    0x0000E3A0: 0xDB9C0050 'P...' - lv.q       C700, 80($gp)
    0x0000E3A4: 0x240E8000 '...$' - li         $t6, -32768
    0x0000E3A8: 0x240F7FFF '...$' - li         $t7, 32767
    0x0000E3AC: 0x00001012 '....' - mflo       $v0
    0x0000E3B0: 0x01880018 '....' - mult       $t4, $t0     // gteIR2 * gteIR0
    0x0000E3B4: 0x00A21007 '....' - srav       $v0, $v0, $a1
    0x0000E3B8: 0xAF820064 'd...' - sw         $v0, 100($gp)
    0x0000E3BC: 0x004E582C ',XN.' - max        $t3, $v0, $t6
    0x0000E3C0: 0x016F582D '-Xo.' - min        $t3, $t3, $t7
    0x0000E3C4: 0x004B1023 '#.K.' - subu       $v0, $v0, $t3
    0x0000E3C8: 0x0002082B '+...' - sltu       $at, $zr, $v0
    0x0000E3CC: 0x00010E00 '....' - sll        $at, $at, 24
    0x0000E3D0: 0xAF8B0024 '$...' - sw         $t3, 36($gp)     // gteIR1
    0x0000E3D4: 0x00001012 '....' - mflo       $v0
    0x0000E3D8: 0x01A80018 '....' - mult       $t5, $t0     // gteIR3 * gteIR0
    0x0000E3DC: 0x00A21007 '....' - srav       $v0, $v0, $a1
    0x0000E3E0: 0xAF820068 'h...' - sw         $v0, 104($gp)
    0x0000E3E4: 0x004E602C ',`N.' - max        $t4, $v0, $t6
    0x0000E3E8: 0x018F602D '-`..' - min        $t4, $t4, $t7
    0x0000E3EC: 0x004C1023 '#.L.' - subu       $v0, $v0, $t4
    0x0000E3F0: 0x0002102B '+...' - sltu       $v0, $zr, $v0
    0x0000E3F4: 0x7C41BDC4 '..A|' - ins        $at, $v0, 23, 1
    0x0000E3F8: 0xAF8C0028 '(...' - sw         $t4, 40($gp)     // gteIR2
    0x0000E3FC: 0x00001012 '....' - mflo       $v0
    0x0000E400: 0x00A21007 '....' - srav       $v0, $v0, $a1
    0x0000E404: 0xAF82006C 'l...' - sw         $v0, 108($gp)
    0x0000E408: 0x004E682C ',hN.' - max        $t5, $v0, $t6
    0x0000E40C: 0x01AF682D '-h..' - min        $t5, $t5, $t7
    0x0000E410: 0x004D1023 '#.M.' - subu       $v0, $v0, $t5
    0x0000E414: 0x0002102B '+...' - sltu       $v0, $zr, $v0
    0x0000E418: 0x7C41B584 '..A|' - ins        $at, $v0, 22, 1
    0x0000E41C: 0xAF8D002C ',...' - sw         $t5, 44($gp)     // gteIR3

    0x0000E420: 0x241800FF '...$' - li         $t8, 255
    0x0000E424: 0x8F880018 '....' - lw         $t0, 24($gp)     // gteRGB
    0x0000E428: 0x000B5903 '.Y..' - sra        $t3, $t3, 4
    0x0000E42C: 0x000C6103 '.a..' - sra        $t4, $t4, 4
    0x0000E430: 0x000D6903 '.i..' - sra        $t5, $t5, 4
    0x0000E434: 0x030B102B '+...' - sltu       $v0, $t8, $t3
    0x0000E438: 0x000B582C ',X..' - max        $t3, $zr, $t3
    0x0000E43C: 0x030B582D '-X..' - min        $t3, $t8, $t3
    0x0000E440: 0x7C41AD44 'D.A|' - ins        $at, $v0, 21, 1
    0x0000E444: 0x030C102B '+...' - sltu       $v0, $t8, $t4
    0x0000E448: 0x000C602C ',`..' - max        $t4, $zr, $t4
    0x0000E44C: 0x030C602D '-`..' - min        $t4, $t8, $t4
    0x0000E450: 0x7C41A504 '..A|' - ins        $at, $v0, 20, 1
    0x0000E454: 0x030D102B '+...' - sltu       $v0, $t8, $t5
    0x0000E458: 0x000D682C ',h..' - max        $t5, $zr, $t5
    0x0000E45C: 0x030D682D '-h..' - min        $t5, $t8, $t5
    0x0000E460: 0x7C419CC4 '..A|' - ins        $at, $v0, 19, 1
    0x0000E464: 0x7D683804 '.8h}' - ins        $t0, $t3, 0, 8
    0x0000E468: 0x7D887A04 '.z.}' - ins        $t0, $t4, 8, 8
    0x0000E46C: 0x7DA8BC04 '...}' - ins        $t0, $t5, 16, 8
    0x0000E470: 0x48E8007C '|..H' - mtv        $t0, S703
    0x0000E474: 0x48E1000F '...H' - mtv        $at, S330
    0x0000E478: 0x03E00008 '....' - jr         $ra
    0x0000E47C: 0xF79C0058 'X...' - svl.q      C700, 88($gp)

Ну в принципе ничего особенного, только вычисление RGB после вычисления IR:

Сборка:

{
    u32 rgb = gteRGB;
    int shift = ((psxRegs.code >> 19) & 1) * 12, color;

    gteMAC1 = (gteIR1 * gteIR0) >> shift;
    gteMAC2 = (gteIR2 * gteIR0) >> shift;
    gteMAC3 = (gteIR3 * gteIR0) >> shift;

    gteIR1 = min ( max (gteMAC1, -32768), 32767 );
    gteFLAG |= ((gteMAC1 - gteIR1) > 0) << 24;
    gteIR2 = min ( max (gteMAC2, -32768), 32767 );
    gteFLAG |= ((gteMAC2 - gteIR2) > 0) << 23;
    gteIR3 = min ( max (gteMAC3, -32768), 32767 );
    gteFLAG |= ((gteMAC3 - gteIR3) > 0) << 22;

    gteFLAG |= ((u32)(gteIR1 >> 4) > 255) << 21;
    color = min ( 255, max (0, gteIR1 >> 4) );
    rgb = (rgb & ~0xff) | (color & 0xff);       // Red
    gteFLAG |= ((u32)(gteIR2 >> 4) > 255) << 20;
    color = min ( 255, max (0, gteIR2 >> 4) );
    rgb = (rgb & ~0xff00) | ((color & 0xff) << 8);  // Green
    gteFLAG |= ((u32)(gteIR3 >> 4) > 255) << 19;
    color = min ( 255, max (0, gteIR3 >> 4) );
    rgb = (rgb & ~0xff0000) | ((color & 0xff) << 16);  // Blue

    gteRGB0 = gteRGB1;
    gteRGB1 = gteRGB2;
    gteRGB2 = rgb;
}

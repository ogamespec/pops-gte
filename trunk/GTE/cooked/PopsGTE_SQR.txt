
SQR sf  Required cycles: 5

Function: Vector squaring

Items specified using arguments:

||Argument ||Specified content ||Value=0 ||Value=1||
||sf ||Output format ||-- ||Performs calculations on data <br>shifted 12 bits to the left in the<br>IRn register.||

Calculations: (m and n specify the data format of IRp(p=1,2,3) as (1.m.n).)

sf == 0     sf == 1
(1.m+28.n)  (1.m+16.n+12)   L1 = IR1*IR1; <1>
(1.m+28.n)  (1.m+16.n+12)   L2 = IR2*IR2; <2>
(1.m+28.n)  (1.m+16.n+12)   L3 = IR3*IR3; <3>
(1.m.n)     (1.m+16.n+12)   IR1 = limA1U(L1);
(1.m.n)     (1.m+16.n+12)   IR2 = limA2U(L2);
(1.m.n)     (1.m+16.n+12)   IR3 = limA3U(L3);
(1.m+16.0)  (1.m+16.n+12)   MAC1 = L1;
(1.m+16.0)  (1.m+16.n+12)   MAC2 = L2;
(1.m+16.0)  (1.m+16.n+12)   MAC3 = L3;


Pcsx:
#define MAC2IR1() {           \
    if (gteMAC1 < (long)0) { gteIR1=(long)0; gteFLAG|=1<<24;}  \
    else if (gteMAC1 > (long)(32767)) { gteIR1=(long)(32767); gteFLAG|=1<<24;} \
    else gteIR1=(long)gteMAC1;                                                         \
    if (gteMAC2 < (long)0) { gteIR2=(long)0; gteFLAG|=1<<23;}      \
    else if (gteMAC2 > (long)(32767)) { gteIR2=(long)(32767); gteFLAG|=1<<23;}    \
    else gteIR2=(long)gteMAC2;                                                            \
    if (gteMAC3 < (long)0) { gteIR3=(long)0; gteFLAG|=1<<22;}         \
    else if (gteMAC3 > (long)(32767)) { gteIR3=(long)(32767); gteFLAG|=1<<22;}       \
    else gteIR3=(long)gteMAC3; \
}

    gteFLAG = 0;
    if (psxRegs.code & 0x80000) {
        gteMAC1 = FNC_OVERFLOW1((gteIR1 * gteIR1) >> 12);
        gteMAC2 = FNC_OVERFLOW2((gteIR2 * gteIR2) >> 12);
        gteMAC3 = FNC_OVERFLOW3((gteIR3 * gteIR3) >> 12);
    } else {
        gteMAC1 = FNC_OVERFLOW1(gteIR1 * gteIR1);
        gteMAC2 = FNC_OVERFLOW2(gteIR2 * gteIR2);
        gteMAC3 = FNC_OVERFLOW3(gteIR3 * gteIR3);
    }
    MAC2IR1();
    SUM_FLAG

Pops:

EXT RD, RS, P, S: RS = RS P+S-1:P
INS RD, RS, P, S: RD P+S-1:P = RS S-1:0
MOVN RD, RS, RT: IF RT != 0, RD = RS
MOVZ RD, RS, RT: IF RT = 0, RD = RS

     -----------------------------------------------------------------------------------------------
    |31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
    |-----------------------------------------------------------------------------------------------|
    | 0  1  0  0  1  0|       OP2       |SF| MX  |  V  | CV  |  LM    | 0  0  0  0|      OP1        |
     -----------------------------------------------------------------------------------------------

    a0 - на входе - код инструкции
    gp - регистры GTE

    a1 = (code >> 19) & 1
    v1 = a1 << 1
    a0 = a1 + v1
    a1 = a0 << 2

    if (sf) a1 = 12
    else a1 = 0;

    a1 = shift

    shift = ((psxRegs.code >> 19) & 1) * 12;

---

    t0 = gteIR1
    t1 = gteIR2
    t2 = gteIR3

    Acc = gteIR1 * gteIR1

    at = 0
    a2 = 32767

    t0 = Lo

    Acc = gteIR2 * gteIR2

    t0 = (gteIR1 * gteIR1) >> shift
    gteMAC1 = t0
    t4 = 32767 < gteMAC1
    t0 = min (32767, gteMAC1)
    at |= (32767 < gteMAC1) << 24;
    gteIR1 = min (32767, gteMAC1)

*
    t1 = Lo
    Acc = gteIR3 * gteIR3
    t1 = (gteIR2 * gteIR2) >> shift
    gteMAC2 = t1
    t4 = 32767 < gteMAC2
    t1 = min (32767, gteMAC2)
    at |= (32767 < gteMAC2) << 23;
    gteIR2 = min (32767, gteMAC2)

*
    t2 = Lo
    t2 = (gteIR3 * gteIR3) >> shift
    gteMAC3 = t2
    t4 = 32767 < gteMAC3
    t2 = min (32767, gteMAC3)
    at |= (32767 < gteMAC3) << 22;
    gteIR3 = min (32767, gteMAC3);

    VFPU.S330 = at

Си:

{
    int shift = ((psxRegs.code >> 19) & 1) * 12;

    gteMAC1 = (gteIR1 * gteIR1) >> shift;
    gteFLAG |= (gteMAC1 > 32767) << 24;
    gteIR1 = min (32767, gteMAC1);

    gteMAC2 = (gteIR2 * gteIR2) >> shift;
    gteFLAG |= (gteMAC2 > 32767) << 23;
    gteIR2 = min (32767, gteMAC2);

    gteMAC3 = (gteIR3 * gteIR3) >> shift;
    gteFLAG |= (gteMAC3 > 32767) << 22;
    gteIR3 = min (32767, gteMAC3);
}


SQR:

    0x00000F60: 0x7C8504C0 '...|' - ext        $a1, $a0, 19, 1
    0x00000F64: 0x00051840 '@...' - sll        $v1, $a1, 1
    0x00000F68: 0x00652021 '! e.' - addu       $a0, $v1, $a1
    0x00000F6C: 0x27BDFFF0 '...'' - addiu      $sp, $sp, -16
    0x00000F70: 0x00042880 '.(..' - sll        $a1, $a0, 2
    0x00000F74: 0xAFBF0000 '....' - sw         $ra, 0($sp)
    0x00000F78: 0x0C003AE1 '.:..' - jal        sub_0000EB84
    0x00000F7C: 0x00002021 '! ..' - move       $a0, $zr
    0x00000F80: 0x8FBF0000 '....' - lw         $ra, 0($sp)
    0x00000F84: 0x03E00008 '....' - jr         $ra
    0x00000F88: 0x27BD0010 '...'' - addiu      $sp, $sp, 16

sub_0000EB84:       ; Refs: 0x00000F78 
    0x0000EB84: 0x8F880024 '$...' - lw         $t0, 36($gp)     // gteIR1
    0x0000EB88: 0x8F890028 '(...' - lw         $t1, 40($gp)     // gteIR2
    0x0000EB8C: 0x8F8A002C ',...' - lw         $t2, 44($gp)     // gteIR3
    0x0000EB90: 0x01080018 '....' - mult       $t0, $t0
    0x0000EB94: 0x24010000 '...$' - li         $at, 0
    0x0000EB98: 0x24067FFF '...$' - li         $a2, 32767
    0x0000EB9C: 0x00004012 '.@..' - mflo       $t0
    0x0000EBA0: 0x01290018 '..).' - mult       $t1, $t1
    0x0000EBA4: 0x00A84007 '.@..' - srav       $t0, $t0, $a1
    0x0000EBA8: 0xAF880064 'd...' - sw         $t0, 100($gp)
*
    0x0000EBAC: 0x00C8602B '+`..' - sltu       $t4, $a2, $t0
    0x0000EBB0: 0x00C8402D '-@..' - min        $t0, $a2, $t0
    0x0000EBB4: 0x7D81C604 '...}' - ins        $at, $t4, 24, 1
    0x0000EBB8: 0xAF880024 '$...' - sw         $t0, 36($gp)
    0x0000EBBC: 0x00004812 '.H..' - mflo       $t1
    0x0000EBC0: 0x014A0018 '..J.' - mult       $t2, $t2
    0x0000EBC4: 0x00A94807 '.H..' - srav       $t1, $t1, $a1
    0x0000EBC8: 0xAF890068 'h...' - sw         $t1, 104($gp)
    0x0000EBCC: 0x00C9602B '+`..' - sltu       $t4, $a2, $t1
    0x0000EBD0: 0x00C9482D '-H..' - min        $t1, $a2, $t1
    0x0000EBD4: 0x7D81BDC4 '...}' - ins        $at, $t4, 23, 1
    0x0000EBD8: 0xAF890028 '(...' - sw         $t1, 40($gp)
*
    0x0000EBDC: 0x00005012 '.P..' - mflo       $t2
    0x0000EBE0: 0x00AA5007 '.P..' - srav       $t2, $t2, $a1
    0x0000EBE4: 0xAF8A006C 'l...' - sw         $t2, 108($gp)
    0x0000EBE8: 0x00CA602B '+`..' - sltu       $t4, $a2, $t2
    0x0000EBEC: 0x00CA502D '-P..' - min        $t2, $a2, $t2
    0x0000EBF0: 0x7D81B584 '...}' - ins        $at, $t4, 22, 1
    0x0000EBF4: 0xAF8A002C ',...' - sw         $t2, 44($gp)
    0x0000EBF8: 0x03E00008 '....' - jr         $ra
    0x0000EBFC: 0x48E1000F '...H' - mtv        $at, S330

